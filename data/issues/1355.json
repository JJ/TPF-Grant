{
  "body": "It's [not quite the right tool for the job](https://www.reddit.com/r/perl/comments/6dfj2g/perl_6_interactive_shell_values_in_variables/di2g70s/)\r\n\r\nCurrently there's a ton of uses many of which shouldn't be using `.WHAT`:\r\n\r\n```\r\nzoffix@leliana/tmp/tmp.jxnsvMuh21 (master)$ grep -FR '.WHAT'\r\ndoc/Language/functions.pod6:multi mistake-proto($str, $number) { say $str.WHAT }\r\ndoc/Language/functions.pod6:   say $bar.WHAT; # OUTPUT: «(Bar)␤»\r\ndoc/Language/typesystem.pod6:    say $a.WHAT;\r\ndoc/Language/typesystem.pod6:identity between the object and its C<.WHAT> pseudo-method. Note that the\r\ndoc/Language/typesystem.pod6:    say so $a // $a === $a.WHAT;\r\ndoc/Language/typesystem.pod6:    say A.new.WHAT;    # OUTPUT: «(A)␤»\r\ndoc/Language/typesystem.pod6:    say $a.WHAT;     # OUTPUT: «(Names)␤»\r\ndoc/Language/typesystem.pod6:    say one.WHAT; # OUTPUT: «()␤»\r\ndoc/Language/typesystem.pod6:    say $e.WHAT;  # OUTPUT: «(Map)␤»\r\ndoc/Language/variables.pod6:    say @bar.WHAT;          # OUTPUT: «(Array)␤»\r\ndoc/Language/variables.pod6:    say $baz.WHAT;          # OUTPUT: «(List)␤»\r\ndoc/Language/faq.pod6:    say @a.WHAT;            # OUTPUT: «(Array)␤»\r\ndoc/Language/faq.pod6:    say $scalar.WHAT;       # OUTPUT: «(Array)␤»\r\ndoc/Language/exceptions.pod6:            say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }\r\ndoc/Language/classtut.pod6:    say $o.WHAT;\r\ndoc/Language/classtut.pod6:The C<.WHAT> method returns the type object associated with the object\r\ndoc/Language/classtut.pod6:know about, finding its type with C<.WHAT>, seeing a construction recipe for\r\ndoc/Language/containers.pod6:    say @a.WHAT;                # OUTPUT: «(List)␤»\r\ndoc/Language/5to6-nutshell.pod6:        say $query.WHAT;       # (Block)\r\ndoc/Language/objects.pod6:    my $int-type-obj = 1.WHAT;\r\ndoc/Language/objects.pod6:    if $x.WHAT B<L<===>> Int {\r\ndoc/Language/5to6-perlfunc.pod6:use C<$var.WHAT.perl>.  If you really want P5 ref\r\ndoc/Language/subscripts.pod6:    say $request.header.WHAT;  # OUTPUT: «(HTTP::Header)␤»\r\ndoc/Language/rb-nutshell.pod6:    $person.WHAT              # Perl 6, returns Person (class)\r\ndoc/Language/glossary.pod6:    say <42>.WHAT;     # OUTPUT: «(IntStr)␤»\r\ndoc/Language/glossary.pod6:    say <42.1e0>.WHAT; # OUTPUT: «(NumStr)␤»\r\ndoc/Language/glossary.pod6:    say <42.1>.WHAT;   # OUTPUT: «(RatStr)␤»\r\ndoc/Language/glossary.pod6:    say <42/1>.WHAT;   # OUTPUT: «(Rat)␤»\r\ndoc/Language/glossary.pod6:    say <42+0i>.WHAT;  # OUTPUT: «(Complex)␤»\r\ndoc/Language/glossary.pod6:    say < 42+0i >.WHAT;# OUTPUT: «(ComplexStr)␤»\r\ndoc/Language/glossary.pod6:    say < 42/1 >.WHAT; # OUTPUT: «(RatStr)␤»\r\ndoc/Language/mop.pod6:For example C<42.WHAT> returns the C<Int> type object.\r\ndoc/Type/ComplexStr.pod6:    my $f = <42+0i>; say $f.WHAT; # OUTPUT: «(ComplexStr)␤»\r\ndoc/Type/Pair.pod6:    say $manna.WHAT;\r\ndoc/Type/Pair.pod6:    say $manna.WHAT;\r\ndoc/Type/Pair.pod6:    say $p.pairs.WHAT; # OUTPUT: «(List)␤»\r\ndoc/Type/Pair.pod6:    say $p.WHAT;                                      # OUTPUT: «(List)␤»\r\ndoc/Type/Pair.pod6:    say $p.first.WHAT;                                # OUTPUT: «(Pair)␤»\r\ndoc/Type/Scalar.pod6:    $a.WHAT.say;     # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    $a.VAR.WHAT.say; # OUTPUT: «(Scalar)␤»\r\ndoc/Type/Scalar.pod6:    $b.WHAT.say;     # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    $b.VAR.WHAT.say; # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    @a[0].WHAT.say;            # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    @a[0].VAR.WHAT.say;        # OUTPUT: «(Scalar)␤»\r\ndoc/Type/Scalar.pod6:    [1, 2, 3][0].WHAT.say;     # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    [1, 2, 3][0].VAR.WHAT.say; # OUTPUT: «(Scalar)␤»\r\ndoc/Type/Scalar.pod6:    (1, 2, 3)[0].WHAT.say;     # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    (1, 2, 3)[0].VAR.WHAT.say; # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    c.WHAT.say;              # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    c.VAR.WHAT.say;          # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    d.WHAT.say;              # OUTPUT: «(Int)␤»\r\ndoc/Type/Scalar.pod6:    d.VAR.WHAT.say;          # OUTPUT: «(Scalar)␤»\r\ndoc/Type/Parameter.pod6:    sub b($x) { $x.WHAT.say }                   # does the same thing, but uglier.\r\ndoc/Type/Whatever.pod6:    say (1..*).WHAT;        # OUTPUT: «(Range)␤»\r\ndoc/Type/Whatever.pod6:    say (1..*-1).WHAT;      # OUTPUT: «(WhateverCode)␤»\r\ndoc/Type/IntStr.pod6:    my $f = <42>; say $f.WHAT; # OUTPUT: «(IntStr)␤»\r\ndoc/Type/Block.pod6:    say $block.WHAT;            # OUTPUT: «(Block)␤»\r\ndoc/Type/Sub.pod6:    say $s.WHAT;        # OUTPUT: «(Sub)␤»\r\ndoc/Type/Dateish.pod6:    say $dt.formatter.WHAT;           # OUTPUT: «(Callable)␤»\r\ndoc/Type/Dateish.pod6:    say $dt.formatter.WHAT;           # OUTPUT: «(Sub)␤»\r\ndoc/Type/Signature.pod6:    sub f(Int(Str) $want-int, Str() $want-str) { say $want-int.WHAT, $want-str.WHAT }\r\ndoc/Type/Signature.pod6:    sub foo(Date(Str) $d) { say $d.WHAT; say $d };\r\ndoc/Type/Signature.pod6:    sub a(Int $i, Str $s) { say $i.WHAT, $s.WHAT }\r\ndoc/Type/Signature.pod6:    sub b(|c) { say c.WHAT; a(|c) }\r\ndoc/Type/RatStr.pod6:    my $f = <42.1>; say $f.WHAT; # OUTPUT: «(RatStr)␤»\r\ndoc/Type/UInt.pod6:  say $u.WHAT;     # OUTPUT: «(Int)␤» - UInt is a subset, so the type is still Int.\r\ndoc/Type/UInt.pod6:  say $i.WHAT;     # OUTPUT: «(Int)␤»\r\ndoc/Type/Rat.pod6:    say approx-sqrt(2, 5).WHAT;     # OUTPUT: «(Rat)␤»\r\ndoc/Type/Rat.pod6:    say approx-sqrt(2, 10).WHAT;    # OUTPUT: «(Num)␤»\r\ndoc/Type/Regex.pod6:    say &R.WHAT; # OUTPUT: «(Regex)␤»\r\ndoc/Type/NumStr.pod6:    my $f = <42.1e0>; say $f.WHAT; # OUTPUT: «(NumStr)␤»\r\ndoc/Type/Hash.pod6:    say %h<a>.WHAT;             # OUTPUT: «(Pair)␤»\r\ndoc/Type/Hash.pod6:    say $h.WHAT;                # OUTPUT: «Hash␤»\r\ndoc/Type/Hash.pod6:        say $query.WHAT;       # OUTPUT: «Block␤»\r\ndoc/Type/Hash.pod6:say $query.WHAT;         # OUTPUT: «Hash␤»\r\ndoc/Type/Hash.pod6:say %query.WHAT;         # OUTPUT: «Hash␤»\r\ndoc/Type/Hash.pod6:        say $query.WHAT;     # OUTPUT: «Hash␤»\r\ndoc/Type/List.pod6:    say (1,2,3,4).WHAT;        # OUTPUT: «(List)␤»\r\ndoc/Type/List.pod6:    say (1,2,3,4).values.WHAT; # OUTPUT: «(Seq)␤»\r\ndoc/Type/List.pod6:    say ('hello', 1, 22/7, 42, 'world').map: { .WHAT.perl } # OUTPUT: «(Str Int Rat Int Str)␤»\r\ndoc/Type/Baggy.pod6:    say $h.WHAT;                                      # OUTPUT: «(Hash[Any,Any])␤»\r\ndoc/Type/Baggy.pod6:    say $sh.WHAT;                                     # OUTPUT: «(SetHash)␤»\r\ndoc/Type/Str.pod6:    say val(\"42\").WHAT;    # OUTPUT: «(IntStr)␤»\r\ndoc/Type/Str.pod6:    say val(\"42e0\").WHAT;  # OUTPUT: «(NumStr)␤»\r\ndoc/Type/Str.pod6:    say val(\"42.0\").WHAT;  # OUTPUT: «(RatStr)␤»\r\ndoc/Type/Str.pod6:    say val(\"42+0i\").WHAT; # OUTPUT: «(ComplexStr)␤»\r\nzoffix@leliana/tmp/tmp.jxnsvMuh21 (master)$ \r\n```",
  "author_association": "MEMBER",
  "assignees": [
    {
      "following_url": "https://api.github.com/users/coke/following{/other_user}",
      "node_id": "MDQ6VXNlcjUwMjU3",
      "gists_url": "https://api.github.com/users/coke/gists{/gist_id}",
      "received_events_url": "https://api.github.com/users/coke/received_events",
      "organizations_url": "https://api.github.com/users/coke/orgs",
      "subscriptions_url": "https://api.github.com/users/coke/subscriptions",
      "html_url": "https://github.com/coke",
      "id": 50257,
      "login": "coke",
      "type": "User",
      "repos_url": "https://api.github.com/users/coke/repos",
      "site_admin": false,
      "events_url": "https://api.github.com/users/coke/events{/privacy}",
      "gravatar_id": "",
      "avatar_url": "https://avatars3.githubusercontent.com/u/50257?v=4",
      "starred_url": "https://api.github.com/users/coke/starred{/owner}{/repo}",
      "followers_url": "https://api.github.com/users/coke/followers",
      "url": "https://api.github.com/users/coke"
    }
  ],
  "assignee": {
    "following_url": "https://api.github.com/users/coke/following{/other_user}",
    "node_id": "MDQ6VXNlcjUwMjU3",
    "gists_url": "https://api.github.com/users/coke/gists{/gist_id}",
    "received_events_url": "https://api.github.com/users/coke/received_events",
    "organizations_url": "https://api.github.com/users/coke/orgs",
    "subscriptions_url": "https://api.github.com/users/coke/subscriptions",
    "html_url": "https://github.com/coke",
    "id": 50257,
    "login": "coke",
    "type": "User",
    "repos_url": "https://api.github.com/users/coke/repos",
    "site_admin": false,
    "events_url": "https://api.github.com/users/coke/events{/privacy}",
    "gravatar_id": "",
    "avatar_url": "https://avatars3.githubusercontent.com/u/50257?v=4",
    "starred_url": "https://api.github.com/users/coke/starred{/owner}{/repo}",
    "followers_url": "https://api.github.com/users/coke/followers",
    "url": "https://api.github.com/users/coke"
  },
  "node_id": "MDU6SXNzdWUyMzI5NTQyNTU=",
  "closed_by": {
    "following_url": "https://api.github.com/users/coke/following{/other_user}",
    "node_id": "MDQ6VXNlcjUwMjU3",
    "gists_url": "https://api.github.com/users/coke/gists{/gist_id}",
    "received_events_url": "https://api.github.com/users/coke/received_events",
    "organizations_url": "https://api.github.com/users/coke/orgs",
    "subscriptions_url": "https://api.github.com/users/coke/subscriptions",
    "html_url": "https://github.com/coke",
    "id": 50257,
    "login": "coke",
    "type": "User",
    "repos_url": "https://api.github.com/users/coke/repos",
    "site_admin": false,
    "events_url": "https://api.github.com/users/coke/events{/privacy}",
    "gravatar_id": "",
    "avatar_url": "https://avatars3.githubusercontent.com/u/50257?v=4",
    "starred_url": "https://api.github.com/users/coke/starred{/owner}{/repo}",
    "followers_url": "https://api.github.com/users/coke/followers",
    "url": "https://api.github.com/users/coke"
  },
  "updated_at": "2017-07-27T02:25:59Z",
  "created_at": "2017-06-01T17:33:48Z",
  "comments_url": "https://api.github.com/repos/perl6/doc/issues/1355/comments",
  "locked": false,
  "title": "Don't use `.WHAT` in examples to print the type info",
  "id": 232954255,
  "html_url": "https://github.com/perl6/doc/issues/1355",
  "closed_at": "2017-07-27T02:25:59Z",
  "milestone": null,
  "state": "closed",
  "labels_url": "https://api.github.com/repos/perl6/doc/issues/1355/labels{/name}",
  "number": 1355,
  "comments": 6,
  "labels": [
    {
      "color": "5DE0FA",
      "name": "docs",
      "node_id": "MDU6TGFiZWwyNDQ4NDMyMjU=",
      "id": 244843225,
      "default": false,
      "url": "https://api.github.com/repos/perl6/doc/labels/docs"
    },
    {
      "color": "e99695",
      "name": "xt",
      "node_id": "MDU6TGFiZWw2Mzk5NzMzODE=",
      "id": 639973381,
      "default": false,
      "url": "https://api.github.com/repos/perl6/doc/labels/xt"
    }
  ],
  "events_url": "https://api.github.com/repos/perl6/doc/issues/1355/events",
  "user": {
    "following_url": "https://api.github.com/users/zoffixznet/following{/other_user}",
    "node_id": "MDQ6VXNlcjU3NDc5MTg=",
    "gists_url": "https://api.github.com/users/zoffixznet/gists{/gist_id}",
    "received_events_url": "https://api.github.com/users/zoffixznet/received_events",
    "organizations_url": "https://api.github.com/users/zoffixznet/orgs",
    "subscriptions_url": "https://api.github.com/users/zoffixznet/subscriptions",
    "html_url": "https://github.com/zoffixznet",
    "id": 5747918,
    "login": "zoffixznet",
    "type": "User",
    "repos_url": "https://api.github.com/users/zoffixznet/repos",
    "site_admin": false,
    "events_url": "https://api.github.com/users/zoffixznet/events{/privacy}",
    "gravatar_id": "",
    "avatar_url": "https://avatars2.githubusercontent.com/u/5747918?v=4",
    "starred_url": "https://api.github.com/users/zoffixznet/starred{/owner}{/repo}",
    "followers_url": "https://api.github.com/users/zoffixznet/followers",
    "url": "https://api.github.com/users/zoffixznet"
  },
  "repository_url": "https://api.github.com/repos/perl6/doc",
  "url": "https://api.github.com/repos/perl6/doc/issues/1355"
}
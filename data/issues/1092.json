{
  "body": "Does the term \"newline\" mean the same thing everywhere in the Perl 6 docs, and if it's to have a specialized meaning, are the docs consistent? There's a lot of historical baggage that comes with the term \"newline\". This is a bit muddled and I have to run. I'll try to refine it later.\r\n\r\nI noticed in the docs for the IO role version of [say], it states:\r\n\r\n> Print the given text in human readable form, followed by a $*OUT.nl-out (platform dependent newline) \r\n\r\nBut, the other things that document `say` are perhaps a bit looser by saying just \"newline\" when I think they mean \"line ending\" (\"line separator\", whatever). When I see \"newline\", I expect it to be the particular character you get with \"\\n\" even though in many places that's actually LINE FEED. So, I'm wrong to think that, but I think most people are wrong in the same way.\r\n\r\nAs a different niggling issue, it's not really followed by `$*OUT.nl-out`, but whatever `.print-nl` decides to return. That's the difference between playing with black magic and using the intended interface. I'd certainly push mere mortals toward the interface. `.print-nl` docs in `IO::Handle` say:\r\n\r\n> Writes a newline to the filehandle. The newline marker, which is stored\r\nin the attribute C<$.nl-out>, defaults to C<\\n> unless another marker has\r\nbeen specified in the call to L<open>.\r\n\r\nThe [documentation for open](https://docs.perl6.org/routine/open) doesn't say anything about `$*OUT`. So, there's that encapsulation issue to deal with. \r\n\r\nThen there's this version of say from Mu (which merely dispatches to another `say`, so kinda another definition but not really):\r\n\r\n> Prints value to $*OUT after stringification using .gist method with newline at end\r\n\r\nAnd so on. I think a lot of the problem is that there are several places where the same thing is being documented when they are really coming from a common source (even with method adapters). Is there anywhere else other than `IO::Handle` that implements the actual workings of `say`? And, is there some other way to document roles, etc to reveal their one true source?\r\n\r\nBut back to \"newline\":\r\n\r\nThere's this line in _doc/Language/regexes.pod6_, but seems to be the definition closer to what I expect. Although it doesn't say what the single character is, it's something. It also notes that translations take place somewhere else:\r\n\r\n> C<\\n> matches a single, logical newline character. C<\\n> is supposed to also\r\nmatch a Windows CR LF codepoint pair; though it is unclear whether the magic\r\nhappens at the time that external data is read, or at regex match time.\r\n\r\nThe problem I foresee is that people using the various line-ending-appending routines will think they are just getting a LINE FEED when on some other system they get something else. It's sweet that Perl 6 tries to give you the local line ending, but for many of the output files I produce (or consume), I'd like to know what I'm going to get, even if that is the \"platform dependent newline\".\r\n\r\nI don't think it's bad to go one way or the other as long as the docs are abundantly clear on what that is. I think that requires precise language and a decision on which one thing you want the user to mess with to discover the line ending.",
  "author_association": "CONTRIBUTOR",
  "assignees": [
    
  ],
  "assignee": null,
  "closed_by": null,
  "updated_at": "2018-05-14T05:05:41Z",
  "created_at": "2016-12-31T01:12:13Z",
  "comments_url": "https://api.github.com/repos/perl6/doc/issues/1092/comments",
  "locked": false,
  "title": "Is it a platform dependent \"newline\" or a traditional newline?",
  "id": 198210732,
  "html_url": "https://github.com/perl6/doc/issues/1092",
  "closed_at": null,
  "milestone": null,
  "state": "open",
  "labels_url": "https://api.github.com/repos/perl6/doc/issues/1092/labels{/name}",
  "number": 1092,
  "comments": 7,
  "labels": [
    {
      "color": "5DE0FA",
      "name": "docs",
      "id": 244843225,
      "default": false,
      "url": "https://api.github.com/repos/perl6/doc/labels/docs"
    },
    {
      "color": "5DE0FA",
      "name": "update",
      "id": 676800676,
      "default": false,
      "url": "https://api.github.com/repos/perl6/doc/labels/update"
    }
  ],
  "events_url": "https://api.github.com/repos/perl6/doc/issues/1092/events",
  "user": {
    "following_url": "https://api.github.com/users/briandfoy/following{/other_user}",
    "gists_url": "https://api.github.com/users/briandfoy/gists{/gist_id}",
    "received_events_url": "https://api.github.com/users/briandfoy/received_events",
    "organizations_url": "https://api.github.com/users/briandfoy/orgs",
    "subscriptions_url": "https://api.github.com/users/briandfoy/subscriptions",
    "html_url": "https://github.com/briandfoy",
    "id": 22255,
    "login": "briandfoy",
    "type": "User",
    "repos_url": "https://api.github.com/users/briandfoy/repos",
    "site_admin": false,
    "events_url": "https://api.github.com/users/briandfoy/events{/privacy}",
    "gravatar_id": "",
    "avatar_url": "https://avatars3.githubusercontent.com/u/22255?v=4",
    "starred_url": "https://api.github.com/users/briandfoy/starred{/owner}{/repo}",
    "followers_url": "https://api.github.com/users/briandfoy/followers",
    "url": "https://api.github.com/users/briandfoy"
  },
  "repository_url": "https://api.github.com/repos/perl6/doc",
  "url": "https://api.github.com/repos/perl6/doc/issues/1092"
}
{
  "body": "Custom classes can implement `submethod DESTROY` to do some clean-up when/if an object of that class is about to be garbage-collected.\r\n\r\nAFAICT, p6doc currently does not explain this.\r\n\r\n---\r\n\r\nThere are some intricacies to document:\r\n\r\n* It is not guaranteed to be run (e.g. it'll never run for objects that aren't garbage collected before the end of the program).\r\n* It is called by the garbage collector, on a thread whose normal control flow is currently paused.\r\n* One mustn't make any assumptions about what the dynamic environment of that thread currently looks like.   <sup>(\"[just about *anything* can be on the call stack at the point a DESTROY is called](https://irclog.perlgeek.de/perl6/2017-10-14#i_15301619)\" &mdash; jnthn)</sup>.\r\n* For example...\r\n  * if the thread in question has called `.protect(&code)` on a [`Lock`](http://docs.perl6.org/type/Lock)...  \r\n  * and is in the middle of executing `&code` when it is paused by garbage collection...\r\n  * and your `DESTROY` method calls `.protect(&cleanup)` on the same lock...\r\n\r\n  ...then `&cleanup` will be executed immediately even though `&code` has not yet finished &ndash; because `Lock.protect` is idempotent (i.e. can be recursively locked from the same thread).\r\n* In such cases, one can write a DESTROY method as follows to ensure it is run on a \"clean\" thread that is not in the middle of doing things which may cause surprises for your clean-up code:  \r\n  `submethod DESTROY { start { ... } }`  \r\n  I.e. in the `Lock` example:  \r\n  `submethod DESTROY { start $lock.protect: { ... } }`  \r\n  You can safely close over `self` in the `{ ... }` part, and object destruction will be deferred for as long as necessary <sup>(without calling `DESTROY` a second time &ndash; see jnthn's comment below)</sup>.\r\n  See IRC discussion [starting here](https://irclog.perlgeek.de/perl6/2017-10-14#i_15301603).",
  "author_association": "MEMBER",
  "milestone": null,
  "html_url": "https://github.com/perl6/doc/issues/1606",
  "events_url": "https://api.github.com/repos/perl6/doc/issues/1606/events",
  "url": "https://api.github.com/repos/perl6/doc/issues/1606",
  "state": "open",
  "labels": [
    {
      "url": "https://api.github.com/repos/perl6/doc/labels/docs",
      "default": false,
      "name": "docs",
      "color": "5DE0FA",
      "id": 244843225,
      "node_id": "MDU6TGFiZWwyNDQ4NDMyMjU="
    }
  ],
  "title": "Document `submethod DESTROY`, and its intricacies",
  "labels_url": "https://api.github.com/repos/perl6/doc/issues/1606/labels{/name}",
  "closed_at": null,
  "assignees": [
    
  ],
  "locked": false,
  "repository_url": "https://api.github.com/repos/perl6/doc",
  "closed_by": null,
  "comments": 1,
  "user": {
    "events_url": "https://api.github.com/users/smls/events{/privacy}",
    "following_url": "https://api.github.com/users/smls/following{/other_user}",
    "followers_url": "https://api.github.com/users/smls/followers",
    "html_url": "https://github.com/smls",
    "url": "https://api.github.com/users/smls",
    "site_admin": false,
    "type": "User",
    "organizations_url": "https://api.github.com/users/smls/orgs",
    "gists_url": "https://api.github.com/users/smls/gists{/gist_id}",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3093580?v=4",
    "id": 3093580,
    "starred_url": "https://api.github.com/users/smls/starred{/owner}{/repo}",
    "received_events_url": "https://api.github.com/users/smls/received_events",
    "gravatar_id": "",
    "repos_url": "https://api.github.com/users/smls/repos",
    "subscriptions_url": "https://api.github.com/users/smls/subscriptions",
    "node_id": "MDQ6VXNlcjMwOTM1ODA=",
    "login": "smls"
  },
  "id": 265484043,
  "updated_at": "2018-04-08T12:34:29Z",
  "assignee": null,
  "created_at": "2017-10-14T11:13:14Z",
  "number": 1606,
  "comments_url": "https://api.github.com/repos/perl6/doc/issues/1606/comments",
  "node_id": "MDU6SXNzdWUyNjU0ODQwNDM="
}